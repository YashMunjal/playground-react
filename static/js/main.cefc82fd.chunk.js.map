{"version":3,"sources":["components/Editor.js","hooks/useLocal.js","App.js","serviceWorker.js","index.js"],"names":["Editor","displayName","language","value","onChange","useState","open","setOpen","className","onClick","e","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","autoCloseBrackets","autoCloseTags","lineWrapping","lint","theme","mode","lineNumbers","useLocal","key","initalValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeOut","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAgBe,SAASA,EAAT,GAAwD,IAAvCC,EAAsC,EAAtCA,YAAYC,EAA0B,EAA1BA,SAASC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,SAAW,EAM5CC,oBAAS,GANmC,mBAM3DC,EAN2D,KAMtDC,EANsD,KAQlE,OACI,yBAAKC,UAAS,2BAAsBF,EAAO,GAAK,cAC5C,yBAAKE,UAAU,gBACNP,EACL,4BAAQQ,QAAS,kBAAIF,GAAQ,SAAAG,GAAC,OAAGA,OAAI,kBAAC,IAAD,CAAiBC,KAAML,EAAOM,IAAgBC,QAEvF,kBAAC,aAAD,CACIC,eAbO,SAACC,EAAOC,EAAKb,GACxBC,EAASD,IAaLA,MAAOA,EACPK,UAAU,sBACVS,QAAS,CACLC,mBAAkB,EAClBC,eAAc,EACdC,cAAa,EACbC,MAAK,EACLC,MAAM,WACNC,KAAKrB,EACLsB,aAAY,MCrCjB,SAASC,EAASC,EAAIC,GACjC,IAAMC,EAHC,wBAGkBF,EADqB,EAGvBrB,oBAAS,WAC5B,IAAMwB,EAAUC,aAAaC,QAAQH,GACrC,OAAc,MAAXC,EACQG,KAAKC,MAAMJ,GAEE,oBAAdF,EACCA,IAGAA,KAZ+B,mBAGvCxB,EAHuC,KAGjC+B,EAHiC,KAmB9C,OAHAC,qBAAU,WACNL,aAAaM,QAAQR,EAAYI,KAAKK,UAAUlC,MAClD,CAACyB,EAAYzB,IACR,CAACA,EAAM+B,GCuCHI,MA1Df,WAAgB,IAAD,EACWb,EAAS,OAAO,IAD3B,mBACNc,EADM,KACAC,EADA,OAESf,EAAS,MAAM,IAFxB,mBAENgB,EAFM,KAEDC,EAFC,OAGOjB,EAAS,KAAK,IAHrB,mBAGNkB,EAHM,KAGFC,EAHE,OAIevC,mBAAS,IAJxB,mBAINwC,EAJM,KAIEC,EAJF,KAsBb,OAhBAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,8BAAD,OAGAL,EAHA,iCAIDF,EAJC,kCAKCI,EALD,4CASR,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAGb,oCACE,yBAAKnC,UAAU,iBACb,kBAACR,EAAD,CACEE,SAAS,MACTD,YAAY,OACZE,MAAOoC,EACPnC,SAAUoC,IAEZ,kBAACxC,EAAD,CACEE,SAAS,MACTD,YAAY,MACZE,MAAOsC,EACPrC,SAAUsC,IAEZ,kBAAC1C,EAAD,CACEE,SAAS,aACTD,YAAY,aACZE,MAAOwC,EACPvC,SAAUwC,KAGd,yBAAKpC,UAAU,QACb,4BACEqC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,YC3CGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cefc82fd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\n\r\n\r\n//addons\r\nimport 'codemirror/addon/edit/closebrackets'\r\nimport 'codemirror/addon/edit/closetag'\r\n\r\nimport {Controlled as ControlledEditor} from 'react-codemirror2'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCompressAlt,faExpandAlt} from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function Editor({displayName,language,value,onChange}) {\r\n\r\n    const handleChange=(editor,data,value)=>{\r\n            onChange(value);\r\n\r\n    }\r\n    const [open,setOpen]= useState(true)\r\n\r\n    return (\r\n        <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n            <div className=\"editor-title\">\r\n                    {displayName}\r\n                <button onClick={()=>setOpen(e=>!e)}><FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} /></button>\r\n            </div>\r\n            <ControlledEditor \r\n                onBeforeChange={handleChange}\r\n                value={value}\r\n                className=\"code-mirror-wrapper\"\r\n                options={{\r\n                    autoCloseBrackets:true,\r\n                    autoCloseTags:true,\r\n                    lineWrapping:true,\r\n                    lint:true,\r\n                    theme:'material',\r\n                    mode:language,\r\n                    lineNumbers:true,\r\n                \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nvar PREFIX='playground-react-yash'\r\n\r\nexport default function useLocal(key,initalValue) {\r\n    const prefixedKey=PREFIX+key\r\n\r\n    const [value,setValue]=useState(()=>{\r\n        const jsonValue=localStorage.getItem(prefixedKey)\r\n        if(jsonValue!=null){\r\n            return JSON.parse(jsonValue)\r\n        }\r\n        if(typeof initalValue==='function'){\r\n            return initalValue()\r\n        }\r\n        else{\r\n            return initalValue\r\n        }\r\n    })\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem(prefixedKey,JSON.stringify(value))\r\n    },[prefixedKey,value])\r\n    return [value,setValue]\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport Editor from \"./components/Editor\";\nimport useLocal from './hooks/useLocal'\n\nfunction App() {\n  const [html, setHtml] = useLocal(\"html\",\"\");\n  const [css, setCss] = useLocal(\"css\",\"\");\n  const [js, setJs] = useLocal(\"js\",\"\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      setSrcDoc(\n        `\n    <html>\n      <style>${css}</style>\n      <body>${html}</body>\n      <script>${js}</script>\n    </html>\n            `\n      );\n    }, 250);\n\n    return () => clearTimeout(timeOut);\n  }, [html, css, js]);\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JavaScript\"\n          value={js}\n          onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        ></iframe>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}